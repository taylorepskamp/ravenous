{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","fetch","headers","authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5286f588.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\nclass Business extends React.Component{\n  render() {\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={this.props.business.imageSrc} alt=''/>\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category.toUpperCase()}</h3>\n            <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n            <p>{`${this.props.business.reviewCount} reviews`}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\n\n\nclass BusinessList extends React.Component{\n  render() {\n    return( \n      <div className=\"BusinessList\">\n           {\n            this.props.businesses.map(business => {\n             return <Business key={business.id} business={business}/>\n           })\n           }\n      </div>)\n  }\n}\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      term:'' ,\n      location:'' ,\n      sortBy:'best_match'\n    };\n    this.sortByOptions = {\n      'Best Match': 'best_match' ,\n      'Highest Rated': 'rating' ,\n      'Most Reviewed':'review_count'};\n    this.handleTermChange = this.handleTermChange.bind(this)\n    this.handleLocationChange= this.handleLocationChange.bind(this)\n    this.handleSearch= this.handleSearch.bind(this)\n  }\n  getSortByClass(sortByOption){\n    if(this.state.sortBy === sortByOption){\n      return 'active'\n    }\n    return ''\n  } \n  handleSortByChange(sortByOption){\n    this.setState({sortBy: sortByOption})  \n  }\n\n  handleTermChange(event){\n    this.setState({term: event.target.value}) \n  }\n\n  handleLocationChange(event){\n    this.setState({location: event.target.value}) \n  }\n\n  handleSearch(event){\n    this.props.searchYelp(this.state.term,this.state.location,this.state.sortBy)\n    event.preventDefault()\n  \n  }\n\n  renderSortByOptions(){\n    return Object.keys(this.sortByOptions).map(sortByOption =>{\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this,sortByOptionValue)}>{sortByOption}</li>\n    });\n  }\n  render(){\n    return(\n    <div className=\"SearchBar\" >\n  <div className=\"SearchBar-sort-options\">\n    <ul>\n      {this.renderSortByOptions()}\n    </ul>\n  </div>\n  <div className=\"SearchBar-fields\">\n    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange}/>\n    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\n  </div>\n  <div className=\"SearchBar-submit\">\n    <a onClick={this.handleSearch}>Let's Go</a>\n  </div>\n</div>)\n  }\n}\n\nexport default SearchBar;\n","const apiKey = 'SDZSE8mqBHbmFcFmKHF8zYAdjosiI65v0PePsgONqZQHeTXhBEGbUeXrJZVey8xanbFAN1f1mLLVB5hnEDbqCqbv9DI197MmhgG2xlD6wDrc1AlECW_k899Hf8ZxXnYx'\nconst Yelp = { \n    searchYelp : function searchYelp(term,location,sortBy) { \n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n        {headers:{authorization:`Bearer ${apiKey}`},\n        }).then(response=>{\n            return response.json()\n        })\n        .then(jsonResponse => {\n            if(jsonResponse.businesses){\n                return jsonResponse.businesses.map(business=> {\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                    };\n                });\n            };\n        });\n }\n};\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {businesses: []};\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term,location,sortBy){\n    Yelp.searchYelp(term,location,sortBy).then((businesses)=>{\n      this.setState({ businesses: businesses });\n    }) \n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>ravenous</h1> \n      <SearchBar searchYelp= {this.searchYelp}/>\n      <BusinessList businesses ={this.state.businesses}/>\n    </div>);\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}